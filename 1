# ini_handler.py
import os
import re
import configparser
import pandas as pd
from typing import Dict, List, Union, Optional

class INIHandler:
    """INI配置文件处理器（GB2312编码/无空格格式）"""

    def __init__(self, ini_path: str, default_section: str = "DEFAULT"):
        self.ini_path = os.path.abspath(ini_path)
        self.default_section = default_section.upper()  # 统一转为大写
        self.config = configparser.ConfigParser()
        self.config.optionxform = lambda option: option  # 保持键名大小写

    # ---------------------- 核心读写方法 ----------------------
    def load_ini(self) -> None:
        """加载INI文件（强制GB2312编码）"""
        try:
            os.makedirs(os.path.dirname(self.ini_path), exist_ok=True)
            if not os.path.exists(self.ini_path):
                self._create_empty_ini()
            else:
                with open(self.ini_path, 'r', encoding='gb2312') as f:
                    self.config.read_file(f)
        except Exception as e:
            raise RuntimeError(f"加载失败: {str(e)}")

    def save_ini(self) -> None:
        """保存INI文件（无空格格式 + GB2312编码）"""
        with open(self.ini_path, 'w', encoding='gb2312') as f:
            for section in self.config.sections():
                f.write(f"[{section}]\n")
                for key, value in self.config.items(section):
                    f.write(f"{key}={value}\n")  # 直接写无空格格式
                f.write("\n")

    def _create_empty_ini(self) -> None:
        """创建空文件并写入默认节"""
        with open(self.ini_path, 'w', encoding='gb2312') as f:
            f.write(f"[{self.default_section}]\n")

    # ---------------------- 键值操作方法 ----------------------
    def set_value(self, section: str, key: str, value: Union[str, int, bool]) -> None:
        """设置键值（自动处理布尔值）"""
        section = section.upper()
        if not self.config.has_section(section):
            self.config.add_section(section)
        # 类型转换
        if isinstance(value, bool):
            value = "True" if value else "False"
        self.config.set(section, key, str(value))

    def get_value(self, section: str, key: str, default: Optional[str] = None) -> str:
        """获取键值（支持默认值）"""
        section = section.upper()
        try:
            return self.config.get(section, key)
        except (configparser.NoSectionError, configparser.NoOptionError):
            if default is not None:
                return default
            raise KeyError(f"键不存在: [{section}] {key}")

    # ---------------------- Excel批量操作 ----------------------
    def batch_import_excel(self, excel_path: str, level: int) -> None:
        """从Excel批量导入配置（按等级筛选）"""
        try:
            df = pd.read_excel(excel_path)
            if '等级' not in df.columns:
                raise ValueError("Excel缺少'等级'列")
            
            # 筛选指定等级的数据
            df_level = df[df['等级'] == level].dropna(axis=1, how='all')
            if df_level.empty:
                raise ValueError(f"等级{level}无数据")

            # 写入INI
            for _, row in df_level.iterrows():
                for col in df.columns:
                    if col == '等级': continue
                    self.set_value(self.default_section, col, row[col])
            self.save_ini()
        except Exception as e:
            raise RuntimeError(f"Excel导入失败: {str(e)}")

    # ---------------------- 辅助方法 ----------------------
    def list_sections(self) -> List[str]:
        """列出所有配置节"""
        return self.config.sections()

    def clean_format(self) -> None:
        """清理现有INI文件的格式（去除等号空格）"""
        self.load_ini()
        self.save_ini()
        
    class CustomConfigParser(configparser.ConfigParser):
        def write(self, fp, space_around_delimiters=True):
            if space_around_delimiters is None:
                space_around_delimiters = False
            return super().write(fp, space_around_delimiters)
# ---------------------- 使用示例 ----------------------
if __name__ == "__main__":
    try:
        handler = INIHandler("test_config.ini", default_section="AppConfig")
        
        # 从Excel导入数据（假设Excel有'等级'列和配置项）
        handler.batch_import_excel("config_template.xlsx", level=2)
        
        # 手动设置其他值
        handler.set_value("NETWORK", "Timeout", 30)
        handler.set_value("DEBUG", "VerboseLogging", True)
        
        # 保存并验证
        handler.save_ini()
        print("超时时间:", handler.get_value("NETWORK", "Timeout", "未设置"))
        
    except Exception as e:
        print(f"错误: {str(e)}")
